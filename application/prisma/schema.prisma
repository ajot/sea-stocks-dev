generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  passwordHash   String
  image          String?

  role           Role           @default(USER)
  createdAt      DateTime       @default(now())

  subscription   Subscription?  @relation("UserSubscription")
  portfolios     Portfolio[]

  verificationToken String? // Token for email verification
  emailVerified     Boolean @default(false) // Email verification status
}

model Subscription {
  id         String   @id @default(uuid())
  user       User     @relation("UserSubscription", fields: [userId], references: [id])
  userId     String   @unique
  status     SubscriptionStatus?
  plan       SubscriptionPlan?
  customerId String?
  createdAt  DateTime @default(now())
}

model Portfolio {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  name        String
  description String?
  type        PortfolioType @default(PERSONAL)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  holdings    Holding[]
}

model Holding {
  id            String    @id @default(uuid())
  portfolio     Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  portfolioId   String
  
  symbol        String    // Stock symbol (e.g., AAPL, TSLA)
  shares        Decimal   @db.Decimal(18, 8)
  costBasis     Decimal   @db.Decimal(18, 2) // Price per share when purchased
  purchaseDate  DateTime
  currentPrice  Decimal?  @db.Decimal(18, 2) // Latest market price
  sector        String?   // Auto-populated from market data
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([portfolioId, symbol])
}

model PriceCache {
  id          String   @id @default(uuid())
  symbol      String   @unique
  price       Decimal  @db.Decimal(18, 2)
  change      Decimal  @db.Decimal(18, 2)
  changePercent Decimal @db.Decimal(10, 4)
  volume      BigInt
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELED
}

enum SubscriptionPlan {
  FREE
  PRO
}

enum PortfolioType {
  PERSONAL
  RETIREMENT
  TAXABLE
  OTHER
}
